OOPS
Object Oriented Programming structure


the structure of implementation in which our programes
are organized in the form of Class,Methods,Objects

Class: collection of methods and objects

methods: Set of actions to be performed

Object: 	Instance of class
	new keyword- it allocates new memory
	it helps to call the method

	
Oops Concepts :

Encapsulation
Inheritance
Polymorphism
Abstraction
***********************************************************************************************
Encapsulation :

The process of Binding Code And Data together A Single entity(information).
Creating a structure of folders.

***********************************************************************************************
Inheritance   :
Accessing one class property into another class  by using "extends" keyword
Relationship between parent class and the child class

Single:
one parent class accessed by one child class

Multiple:

Two parent class accessed by one child class
this method is not possible in java due to priority issues.
By using INTERFACE,we can overcome

Multilevel:
One parent class(a) is accessed by one child class(b) which is being accessed by another 
child class(c)

Hierarchical:
one parent more than one child

Hybrid:
combination of any two(single and multiple)

Syntax : 

child class extends parentclass

***************************************************************************************************************************************
Polymorphism : 

	One task can be perform in many ways.

Poly - many
morphism  - forms.

Types :

	Method overloading
	Method overriding 


Method Overloading :
 
	In The Same Class the methods name will be same .

	But Arguments (Or) Parameters will be different.

	Depend Upon 

		   Datatype
 		   
		   Datatype order
 	           
		   Datatype count
	
 	It is Also Known as Compile Time Polymorphism Or Static Binding.


Method Overriding:
	
 		Class names are different but Methods name and Arguments names are same

		It is also known as Run Time Polymorphism or Dynamic Binding.

*************************************************************************************************************************
Upcasting : 
		access a child class object in a parent class.

Downcasting : 

		access a parent class object in a child class.

		it is not possible in java.

*************************************************************************************************************************
Abstraction :

	Hiding The Implementation Part.

Types 

	Partial Abstraction Or Abstract Class
	
	Fully Abstraction or Interface.

Abstract Class :
		 
 			It Supports Abstract Method And Non- Abstract Method.
			
			We Cannot Create An Object For Abstract Class Because There
			is no Implementation part .
			
			By Using "extends" keyword we can access Abstract Class.

			public abstract keyword is mandatory.

			there is no implementation part only signature part

Interface :
		 
 			It Supports Only Abstract Method .
			
			We Cannot Create An Object For Interface Because There is 
			no Implementation part .
			

			By Using "implements" keyword we can access Interface.


			public abstract keyword is default here .


***********************************************************************************************************************************************************


Project

packages

class

methods

object
	

upcasting : Accessing The Child Class object into parent class 

downcasting : Accessing The Parent Class Object into Child Class

	      It is not possible in Java.











